'use strict';

import * as fflate from 'fflate';
import * as CryptoJS from 'crypto-js';

// cryptoRandomString is async.
import 'regenerator-runtime/runtime';
import cryptoRandomString from 'crypto-random-string';

// Paste Elements /////////////////////////////////////////////////////////////
const pasteBox = document.getElementById('user-paste');
const noteAbovePasteBox = document.getElementById('note-above-paste-box');

window.newPaste = function newPaste() {
    // Remove fragment url.
    window.location.hash = '';

    // Reload.
    window.location.reload();
}

window.sendPaste = function sendPaste() {
    const passphrase = cryptoRandomString({length: 32, type: 'url-safe'});
    console.log("passphrase", passphrase);
    // Paste
    let paste = {
        "text": pasteBox.innerText,
        "compressed": pasteBox.innerText.length <= 72 ? false : true
    };

    if (paste.compressed) {
        // Increasing mem may increase performance at the cost of memory.
        // The mem ranges from 0 to 12, where 4 is the default.
        const buf = fflate.strToU8(paste.text);
        
        try{
            // Convert the compressed paste to string before storing it.
            // Later we're stringifying this object, if we don't convert
            // it to string here then JSON.stringify will preserve the
            // Array structure, using much more space.
            paste.text = fflate.compressSync(buf, { level: 6, mem: 8 }).toString();
        }catch(err){
            console.log("Compression failed " + err);
        }          
    }

    let encryptedText;
    try {
        // Convert paste to string before encrypting it.
        encryptedText = CryptoJS.AES.encrypt(
            JSON.stringify(paste), passphrase
        ).toString(); 
    } catch(err){
        noteAbovePasteBox.innerText = "Encryption failed.";
        console.log("error"+ err);
        noteAbovePasteBox.classList.remove("hidden");
        noteAbovePasteBox.classList.add("failure");
        return 0;
    }
    // Add encryptedText and passphrase to fragment url.
    const pasteUrl = encryptedText.concat('#', passphrase);
    noteAbovePasteBox.innerText = "Your paste is: ";

   // Update the URL.
    window.location.hash = pasteUrl;

    // Inform user about the Paste.
    let link = document.createElement('a');
    link.setAttribute('href', './#' + pasteUrl);
    link.innerText = '#' + pasteUrl;
    noteAbovePasteBox.appendChild(link);

    noteAbovePasteBox.classList.remove("failure", "hidden");
    noteAbovePasteBox.classList.add("success");
    pasteBox.setAttribute('contenteditable', false);

}

function initialize() {
    const fragment = window.location.hash.substr(1).split('#');

    // Paste & Encryption key in fragment URL.
    if (fragment.length === 2) {
        const encryptedText = fragment[0];
        const passphrase = fragment[1];
        let paste;
        
        try{
            // Decrypt the text and parse it to get the paste structure.
            const bytes = CryptoJS.AES.decrypt(encryptedText, passphrase);
            paste = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));

        } catch(err){
            console.log("error: "+ err);
            noteAbovePasteBox.innerText = "Paste not found.";
            noteAbovePasteBox.classList.remove("hidden");
            noteAbovePasteBox.classList.add("failure");
            return 0;
        }
        
        if (paste.compressed) {
            // Get the original Uint8Array generated by fflate by
            // converting paste.text to Array. It was converted to
            // string so the Array structure was not preserved.
            try{
                const decompressed = fflate.decompressSync(
                    Uint8Array.from(paste.text.split(',').map(Number))
                );
            }catch(err){
                console.log("error:" + err);
                noteAbovePasteBox.innerText = "Decompression failed";
                noteAbovePasteBox.classList.remove("hidden");
                noteAbovePasteBox.classList.add("failure");
                return 0;
            }
            // Store decompressed text.
            paste.text = fflate.strFromU8(decompressed);
        }

        // Update the text.
        pasteBox.innerText = paste.text;

        // Inform user about the paste.
        noteAbovePasteBox.innerText = "Paste successfully decrypted.";
        noteAbovePasteBox.classList.remove("failure", "hidden");
        noteAbovePasteBox.classList.add("success");
        pasteNewButton.classList.remove("hidden");
    } else 
        pasteBox.setAttribute('contenteditable', true);
}
initialize();
window.clonePaste = function clonePaste(){
    // Remove fragment url.
    window.location.hash = "";

    //make the div editable.
    pasteBox.setAttribute('contenteditable', true);
}